Reliable, Scalable, and Maintainable applications

A data-intensive application is typically built from standard building blocks

1. Store data so that they, or another application, can find it again later (database)
2. Remember the result of an expensive operation, to speed up reads (caches)
3. Allo users to search data by keyword or filter it in various ways (search indexes)
4. Send a message to anther process, to be handled asynchronously (stream processing)
5. Periodically crunch a large amount of accumulated data (batch processing)

Full-text search server (A Full-Text Search (FTS) server is a specialized software component or system designed to perform efficient and comprehensive searches within large volumes of text-based data. It is specifically engineered to handle the challenges associated with searching through extensive collections of textual content, such as documents, articles, web pages, emails, and more.)
1. Elastic search
2. Apache Solr
3. Microsoft Azure Cognitive Search
4. MySQL Full-Text Search

If you are designing a data system or service, a lot of tricky questions arise. 
1. How do you ensure that the data remains correct and complete, even when things go wrong internally? 
2. How do you provide consistently good performance to clients, even when parts of your system are degraded? 
3. How do you scale to handle an increase in load?
4. What does a good API for the service look like?

Reliability
1. The application performs the function that the user expected
2. It can tolerate the user making mistakes or using the software in unexpected ways.
3. Its performance is good enough for the required use case, under the expected load and data volume
4. The system prevents any unauthorized access and abuse

Reliability meaning - conitnuing to work correctly, even when things go wrong

The things that can go wrong are called faults, and systems that anticipate faults and can cope with them are
called fault-tolerant or resilient.