package leetcode.graph.bfs;

import java.util.*;

public class LC1926 {

    int min = -1;
    char[][] maze = {};
    int[] entrance = {};
    Queue<List<Integer>> queue = new LinkedList<>();
    int[][] cost = {};
    int[][] visited = {};
    public int nearestExit(char[][] maze, int[] entrance) {
        this.maze = maze;
        this.entrance = entrance;
        this.cost = new int[maze.length][maze[0].length];
        this.visited = new int[maze.length][maze[0].length];
        queue.offer(Arrays.stream(new Integer[]{entrance[0], entrance[1]}).toList());

        while(!queue.isEmpty()){
            List<Integer> xy = queue.poll();
            int i = xy.get(0), j = xy.get(1);
            findExit(i, j);
        }
        return min;
    }

    public void findExit(int i, int j){
        visited[i][j] = 1;
        System.out.println(queue.size());
        if(i != entrance[0] || j != entrance[1]){
            if(i == 0 || j == maze[i].length-1 || j == 0 || i == maze.length-1){
                int steps = this.cost[i][j];
                if(min == -1) min = steps;
                else if(min > steps) min = steps;
                return;
            }
        }
        if(i+1 < maze.length && maze[i+1][j] == '.' && visited[i+1][j] == 0 && !queue.contains(Arrays.stream(new Integer[]{i+1, j}).toList())) {
            this.cost[i+1][j] = this.cost[i][j] + 1;
            queue.offer(Arrays.stream(new Integer[]{i+1,j}).toList());
        }

        if(j+1 < maze[i].length && maze[i][j+1] == '.' && visited[i][j+1] == 0 && !queue.contains(Arrays.stream(new Integer[]{i, j+1}).toList())) {
            this.cost[i][j+1] = this.cost[i][j] + 1;
            queue.offer(Arrays.stream(new Integer[]{i,j+1}).toList());
        }

        if(j-1 >= 0 && maze[i][j-1] == '.' && visited[i][j-1] == 0 && !queue.contains(Arrays.stream(new Integer[]{i, j-1}).toList())) {
            this.cost[i][j-1] = this.cost[i][j] + 1;
            queue.offer(Arrays.stream(new Integer[]{i,j-1}).toList());
        }
        if(i-1 >= 0 && maze[i-1][j] == '.' && visited[i-1][j] == 0 && !queue.contains(Arrays.stream(new Integer[]{i-1, j}).toList())) {
            this.cost[i-1][j] = this.cost[i][j] + 1;
            queue.offer(Arrays.stream(new Integer[]{i-1,j}).toList());
        }
    }


    public static void main(String[] args){
        LC1926 lc1926 = new LC1926();
        char[][] maze = {};
        int[] entrance = {};

//        maze = new char[][]{{'+','+','.','+'},{'.','.','.','+'}, {'+','+','+','.'}};
//        entrance = new int[]{1, 2};
//
//        maze = new char[][]{{'+','+','+'},{'.','.','.'},{'+','+','+'}};
//        entrance = new int[]{1, 0};
//
//        maze = new char[][]{{'.','+'}};
//        entrance = new int[]{0, 0};
//
//        maze = new char[][]{{'.','+','+','+','.','.','.','+','+'},
//                {'.','.','+','.','+','.','+','+','.'},
//                {'.','.','+','.','.','.','.','.','.'},
//                {'.','+','.','.','+','+','.','+','.'},
//                {'.','.','.','.','.','.','.','+','.'},
//                {'.','.','.','.','.','.','.','.','.'},
//                {'.','.','.','+','.','.','.','.','.'},
//                {'.','.','.','.','.','.','.','.','+'},
//                {'+','.','.','.','+','.','.','.','.'}};
//        entrance = new int[]{5, 6};
//
//        maze = new char[][]{{'+','.'}};
//        entrance = new int[]{0, 1};
//
//        maze = new char[][]{{'.','.'}};
//        entrance = new int[]{0, 1};

        maze = new char[][]{{'+','.','.','.','.','.','.','+','.','.','.','+','+','.','+','.','+','+','+','.'},{'.','.','.','.','+','.','+','.','+','.','.','.','.','+','.','+','.','.','.','+'},{'.','.','.','.','.','.','.','.','.','+','+','.','+','.','.','.','+','+','.','+'},{'.','.','.','.','+','+','.','+','.','.','.','.','.','+','.','+','.','.','.','.'},{'.','+','+','.','.','.','+','.','.','.','.','.','.','+','.','.','+','.','.','.'},{'.','.','.','+','.','.','.','+','.','.','.','.','.','.','+','+','.','.','.','+'},{'+','.','+','.','+','.','.','+','.','.','.','.','.','.','.','.','.','.','.','.'},{'.','.','.','.','.','.','+','.','.','.','+','+','.','.','.','.','.','+','.','.'},{'.','+','+','+','.','.','.','+','.','.','+','+','+','+','.','.','+','.','+','.'},{'+','.','.','.','+','.','.','.','+','.','.','.','.','+','.','.','+','+','+','.'},{'.','.','.','.','.','+','.','.','.','.','+','.','.','+','.','.','.','.','.','.'},{'+','.','.','.','.','.','.','.','.','.','.','+','.','.','+','.','.','+','.','+'},{'.','.','.','.','+','+','.','+','+','.','.','.','+','.','+','.','.','+','+','.'},{'.','.','.','.','.','.','.','.','.','+','.','.','.','+','.','+','.','.','.','.'},{'+','.','.','.','.','.','.','.','.','.','.','.','.','+','.','+','.','.','.','.'},{'.','+','.','.','.','.','.','.','+','+','.','.','.','.','.','+','+','.','+','+'},{'.','.','+','.','+','.','.','.','+','.','+','.','.','.','.','.','+','.','.','+'},{'.','+','.','+','+','+','.','.','.','.','+','+','.','.','+','.','+','.','.','.'}};
        entrance = new int[]{17, 18};

        maze = new char[][]{{'+','+','.','.','.','+','.','+','.','.','.','.','+','.','+','.','.','+','.','.','+','.','.','.','+','.','+','.','.','+','.','.','.','+','.','.','.','.','+','+','+','.'},{'.','.','+','.','+','.','.','+','.','.','+','.','.','.','+','.','.','.','+','+','.','+','.','.','+','.','.','.','.','.','+','.','.','.','.','.','.','.','+','.','.','.'},{'.','.','.','.','.','+','.','.','+','.','.','+','.','.','+','.','.','+','+','+','.','.','.','+','.','.','.','.','+','+','+','.','.','+','.','.','+','+','+','.','.','+'},{'+','.','.','+','.','.','.','.','.','.','+','.','.','.','.','.','.','.','.','.','.','+','.','.','.','.','+','.','.','+','.','.','.','.','+','.','+','.','.','+','.','.'},{'.','+','.','.','+','+','.','+','.','.','.','.','.','.','+','.','+','.','.','.','.','+','.','+','.','.','.','.','.','.','.','.','.','+','.','.','+','.','.','.','+','.'},{'+','.','.','+','.','.','+','.','+','+','.','.','+','+','.','.','.','.','.','.','.','.','.','+','+','+','+','.','.','.','.','+','.','.','.','.','+','.','.','.','.','.'},{'.','.','.','.','.','+','.','.','+','+','.','+','.','.','.','.','+','.','.','.','.','.','+','.','+','.','.','.','+','+','.','+','+','+','.','.','.','.','.','+','.','+'},{'.','.','.','+','+','+','+','.','.','.','+','.','+','.','.','.','+','+','.','+','.','+','.','.','.','+','.','+','.','+','.','.','.','.','+','.','.','.','.','.','+','+'},{'.','+','.','+','+','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','+','.','.','.','.','+','.','.','.','.','.','+','.','.','.','.','.','+','.','.','.','.'},{'+','.','.','.','+','.','.','.','.','.','+','+','.','+','.','+','+','.','+','+','+','.','+','.','.','.','.','.','.','.','.','.','.','.','.','.','.','+','.','+','+','.'},{'.','+','.','+','.','.','+','+','.','.','.','+','.','.','.','.','.','.','+','+','.','+','+','.','.','.','.','+','.','.','+','.','.','.','.','.','.','.','+','.','.','.'},{'+','.','.','+','.','.','.','+','.','.','+','.','+','+','+','.','.','.','+','.','.','.','+','.','+','.','.','.','.','.','+','.','.','+','.','.','+','+','.','+','.','.'},{'.','+','+','.','+','+','+','+','+','.','+','.','.','.','+','+','+','.','+','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','+','.','+','.','.','.','.'},{'+','.','+','+','+','+','+','.','+','.','+','.','.','.','.','.','.','.','+','.','+','.','.','.','.','.','.','.','.','+','.','.','+','+','+','+','.','.','+','+','+','.'},{'.','.','.','.','.','.','.','+','+','+','.','+','+','.','.','.','+','.','.','+','+','.','.','.','.','+','.','.','+','+','.','.','.','+','.','+','.','+','.','+','.','+'},{'.','.','.','+','+','.','.','.','+','+','.','.','.','.','.','.','.','.','.','+','.','.','.','.','.','+','+','+','+','.','.','.','.','.','.','.','.','+','.','.','.','.'},{'+','.','.','.','+','.','+','+','+','.','.','.','.','.','+','+','+','+','.','.','.','.','+','.','+','.','.','+','.','.','+','+','+','+','+','+','.','.','+','.','.','.'},{'.','+','.','.','.','.','+','.','.','+','.','.','+','.','.','.','+','.','.','.','.','.','+','.','+','+','.','.','.','.','.','.','+','.','.','+','.','.','+','.','.','+'},{'+','.','.','.','+','.','+','+','+','.','+','+','+','.','.','.','.','+','.','+','.','.','.','+','.','.','.','.','.','.','.','+','.','.','.','.','.','+','.','.','+','+'},{'.','+','+','+','.','.','+','.','.','.','+','.','+','.','.','.','+','+','.','.','.','.','.','.','+','+','.','+','+','.','.','.','+','+','+','+','+','.','.','.','.','.'},{'.','.','.','.','.','.','.','+','.','.','+','.','.','+','.','.','.','+','.','+','.','.','.','.','.','.','.','.','.','+','.','.','.','.','+','.','.','.','.','.','.','+'},{'+','.','.','.','+','.','+','.','+','.','+','+','.','.','.','+','.','.','.','.','+','.','.','+','.','.','.','.','+','.','.','.','.','.','.','+','.','.','+','.','.','+'},{'+','.','.','.','+','.','+','.','.','.','+','+','.','.','+','.','+','.','.','.','.','+','+','.','.','.','+','.','+','.','+','+','+','.','+','.','.','.','.','+','+','+'},{'.','.','.','.','.','+','.','+','.','.','.','+','.','.','+','.','.','.','.','+','.','.','.','.','.','.','+','.','.','.','.','.','+','.','.','+','.','+','.','.','+','.'},{'.','+','.','.','.','.','+','.','.','.','+','.','+','.','.','.','+','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','+','.','+'},{'+','.','+','.','.','.','+','.','+','.','+','+','.','+','.','.','.','.','.','.','.','+','+','+','+','+','.','+','.','+','.','.','.','.','+','.','.','.','+','+','.','.'},{'.','+','.','.','.','.','.','+','+','+','+','+','.','.','+','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','+','+','+','.','.','.','.','.','.','.'},{'+','.','.','.','+','.','.','.','.','.','.','.','+','.','+','.','.','+','.','.','.','+','+','.','.','.','+','.','.','+','.','+','.','.','.','.','.','.','+','.','.','.'},{'.','.','.','.','.','.','+','.','.','+','.','.','.','.','+','.','.','+','+','.','.','.','+','+','+','.','+','.','+','+','.','.','.','.','.','.','+','.','+','.','.','+'},{'+','.','.','+','.','.','.','+','+','.','.','.','+','.','.','.','.','+','+','.','+','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','+','.','.'},{'+','.','.','+','+','+','.','.','.','.','.','+','.','+','.','.','.','+','.','.','.','.','+','.','+','+','+','.','.','+','.','.','.','.','.','+','+','+','.','.','.','+'},{'.','+','.','+','.','.','.','+','.','.','.','+','+','.','.','+','.','.','.','+','.','+','.','.','+','.','+','.','.','+','.','.','+','+','.','+','.','.','+','.','.','+'},{'+','.','.','.','.','+','.','+','.','.','.','+','.','+','.','.','.','+','.','+','.','.','.','.','.','.','.','.','.','+','.','.','.','.','.','.','+','.','+','.','.','.'},{'.','.','.','+','.','.','+','.','.','.','.','.','.','.','.','.','+','.','+','.','+','+','+','.','+','.','.','.','+','.','.','.','+','.','.','.','.','.','.','+','+','+'},{'.','.','.','.','+','.','.','.','+','.','+','+','+','.','.','.','+','.','.','.','.','.','.','+','.','+','+','+','.','.','.','+','.','+','.','+','.','.','.','.','.','.'},{'+','.','.','.','.','.','.','+','.','.','.','.','.','.','.','.','.','.','.','.','.','+','.','+','.','.','+','.','+','.','+','+','.','+','.','.','.','.','.','.','+','+'},{'.','.','+','.','+','.','.','+','+','+','.','.','.','.','.','.','+','.','.','.','.','.','.','+','.','.','+','.','.','.','.','.','.','+','.','+','.','.','.','.','.','.'},{'.','.','.','+','+','.','.','+','.','.','.','.','.','.','.','.','.','+','.','.','+','.','+','.','.','+','.','.','.','.','.','.','.','.','.','+','+','+','+','.','+','+'},{'.','+','+','.','.','+','.','.','+','.','.','.','.','.','+','.','+','.','.','.','.','+','+','+','.','.','+','.','.','.','.','+','.','+','+','+','.','.','+','.','+','+'},{'.','+','.','.','.','.','+','.','.','.','+','.','+','.','.','+','.','.','+','.','.','.','.','.','.','+','+','.','.','.','.','+','.','+','+','+','+','.','.','.','.','+'},{'.','+','.','+','.','.','.','.','+','.','.','.','+','.','.','.','+','+','.','.','.','.','+','.','.','+','+','+','.','.','+','.','.','.','+','+','.','+','.','+','+','+'},{'.','.','.','.','.','.','+','.','.','+','.','.','+','+','+','.','+','.','+','.','+','.','.','.','+','+','.','+','.','.','.','.','.','.','.','+','.','+','.','.','+','+'},{'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','+','.','.','+','.','.','.','.','.','.','.','+','.','.','.','.','.','+','+','.','.','.','.','.','.','.','.'},{'+','.','+','.','.','.','.','.','.','+','+','+','+','+','.','.','+','.','.','.','+','.','.','.','.','+','.','.','.','.','.','.','.','.','.','.','+','.','.','.','.','.'},{'.','.','.','+','.','.','.','.','.','+','.','+','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','+','.','+','.','.','.','.','.','+','+','.','+','.','.','.'},{'+','+','+','.','.','.','.','.','+','+','.','.','.','.','+','+','.','.','.','.','.','+','.','.','+','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'},{'+','.','.','.','.','.','.','+','.','+','.','.','.','.','.','+','+','+','.','.','.','.','.','.','+','+','.','+','.','.','+','+','.','.','.','.','.','+','.','.','.','.'},{'.','+','.','.','.','.','.','.','+','.','.','.','+','+','.','.','+','.','.','.','.','+','+','+','.','.','.','+','.','+','.','.','+','.','.','+','+','.','+','.','+','+'},{'+','.','+','.','+','+','+','.','.','.','.','+','.','+','.','+','+','.','+','.','.','+','.','+','.','.','.','+','.','.','.','.','.','.','.','+','+','.','.','.','.','.'}};
        entrance = new int[]{48, 25};




        int result = lc1926.nearestExit(maze, entrance);
        System.out.println(result);
    }
}
